1. 一致性和原子性

只有在了解并发性之后，多线程编程的好处才会体现出来。 以下是两个最常见的并发问题：

(1). 缓存不一致：每个硬件线程都有自己的缓存，因此一个线程中修改的数据可能不会立即反映在另一个线程中。 
这通常可以通过绕过缓存并直接写入内存来解决，即在许多语言中使用 volatile 关键字。

(2). 读-修改-写：读-修改-写是编程中非常常见的模式。 在多线程编程环境中，R、M、W 阶段的交错经常会产生很多问题。

为了解决读-修改-写带来的问题，我们必须依靠不间断执行的思想，也称为原子执行。
在 RISC-V 中，我们有两类原子指令：

[1]. 加载保留、条件存储：允许我们在多个指令之间不间断执行
[2]. Amo.swap：允许在单个指令内不间断地进行内存操作

这两者都可以用来实现原子原语。 以下是每个示例：
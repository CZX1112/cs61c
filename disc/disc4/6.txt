RISC-V with Arrays and Lists

注释每个代码块的作用。 每个块都是独立运行的。 假设有一个数组，
int arr[6] = {3, 1, 4, 1, 5, 9}，从内存地址0xBFFFFF00开始，还有一个链表结构体（定义如下）
，struct ll* lst， 其第一个元素位于地址 0xABCD0000。 让 s0 包含 arr 的地址 0xBFFFFF00，
让 s1 包含 lst 的地址 0xABCD0000。 您可以假设整数和指针是 4 个字节，并且结构是紧密打包的。 
假设 lst 的最后一个节点的 next 是指向内存地址 0x00000000 的 NULL 指针。

struct ll {
    int val;
    struct ll* next;
}

6.1 lw t0, 0(s0)——t0=arr[0]
       lw t1, 8(s0)——t1=arr[2]
       add t2, t0, t1——t2=t0+t1
       sw t2, 4(s0)——arr[1]=t2=t0+t1

6.2 loop: beq s1, x0, end——判断是否到了链表结尾
                   lw t0, 0(s1)——将链表当前结点的val值存入t0寄存器中
                   addi t0, t0, 1——t0中的值自增1
                   sw t0, 0(s1)——将当前t0寄存器中的值存回当前链表结点的val值中（即结点值自增）
                   lw s1, 4(s1)——将当前结点的next地址值存入s1寄存器，即进入下一个结点
                   jal x0, loop——返回loop
        end:
————将当前链表每一个结点的val值自增1

6.3.            add t0, x0, x0——t0=0
        loop: slti t1, t0, 6——检查t0是否小于6（数组arr的长度）
                    beq t1, x0, end——如果t1等于0（即t0大于等于6），跳转到end
                    slli t2, t0, 2——将t0左移2位，相当于将t0乘以4存入t2中，用于计算数组元素的偏移量
                    add t3, s0, t2——将s0与t2相加，得到数组元素的地址，保存在寄存器t3中
                    lw t4, 0(t3)——从地址t3中加载一个字存到寄存器t4，表示取出数组中元素
                    sub t4, x0, t4——将寄存器t4中的值取反
                    sw t4, 0(t3)——将寄存器t4中的值存储到地址t3处，即存回数组
                    addi t0, t0, 1——计数器t0加1，即t0=t0+1
                    jal x0, loop——跳转回loop标签，继续执行循环
        end:——循环结束
————将数组中每一个元素取反
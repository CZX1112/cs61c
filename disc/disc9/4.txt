4. 缓存未命中的 3C

4.1 返回问题 2 和问题 3，将每个 M 和 R 分类为下述 3 种未命中类型之一：
1. 强制：第一次向缓存请求某个块。 当你第一次带入一个区块时，一定会发生失误。 
通过使用更长的缓存行（更大的块）来减少强制未命中，这会带来周围的地址以及我们请求的数据。 
还可以使用硬件预取器（一种特殊电路，尝试猜测您接下来需要的几个块）预先预取块。

2. 冲突：假设您使用完全关联缓存（使用 LRU 替换策略）经历了整个访问字符串，
并且不会错过该特定访问，则会发生冲突。 增加关联性或改进替换策略将消除失误。

3. 容量：容量未命中与缓存的关联性无关。 如果假设您使用与缓存大小相同的完全关联缓存
（具有 LRU 替换策略）运行整个内存访问字符串，并且该特定访问未命中，则该未命中就是容量未命中。 
消除未命中的唯一方法是增加缓存容量。

注意：可用于查看未命中是否为冲突未命中的测试与可用于查看未命中是否为容量未命中的测试相同。
注意：修复失误的方法有很多种。 未命中的名称并不一定告诉我们减少未命中次数的最佳方法。